generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum User
enum Role {
  USER
  ADMIN
}

// Enum Product
enum PackOrUnit {
  PACK
  UNIT
}

model UserTeste {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String   @map("password_Hash")
  createdAt    DateTime @default(now()) @map("created_at")
}

model CompanyInfo {
  name              String
  address           String
  addressLocalCode  String
  addressLocalZones String
  email             String @unique
  phone             String

  @@map("companyInfo")
}

model User {
  id               String   @id @default(uuid())
  // userInfo     UserInfo @relation(fields: [userInfoId], references: [id])
  // userInfoId   String   @map("userInfo_Id")
  name             String
  email            String   @unique
  passwordHash     String   @map("password_Hash")
  role             Role     @default(USER)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")
  colabStatus      String
  street           String
  addressLocalCode String
  addressLocalZone String
  addressLocal     String
  phone            String

  @@map("users")
}

model Product {
  id                String           @id @default(uuid())
  upc               String           @unique
  sku               String           @unique
  name              String
  description       String
  price             Decimal
  taxId             String           @map("tax_id")
  tax               Tax              @relation(fields: [taxId], references: [id])
  photo             String
  packOrUn          PackOrUnit       @default(UNIT)
  packUnQt          Int
  expirationDate    String?
  productCategoryId String           @map("category_id")
  productCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  stockRecQt        Int?
  alert1            Int?
  alert2            Int?
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @default(now()) @map("updated_at")
  stockControl      StockControl?    @relation(fields: [stockControlId], references: [id])
  stockControlId    Int?             @map("stockControl_id")

  @@map("products")
}

model Tax {
  id          String    @id @default(uuid())
  taxValue    String    @unique
  description String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  products    Product[]

  @@map("taxes")
}

model ProductCategory {
  id              String    @id @default(uuid())
  productCategory String?   @unique
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @map("updated_at")
  product         Product[]

  @@map("productCategory")
}

model Supplier {
  id               Int      @id @default(autoincrement())
  name             String
  taxNumber        String
  street           String
  addressLocalCode String
  addressLocalZone String
  addressLocal     String
  country          String
  phone1           String
  phone2           String
  email            String   @unique
  paymentCondTerm  Int
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")

  @@map("suppliers")
}

model StorageLocation {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String
  locationI   StockControl[] @relation("locationIn")
  locationO   StockControl[] @relation("locationOut")

  @@map("storageLocation")
}

model StockControl {
  id                   Int              @id @default(autoincrement())
  product              Product[]
  quantity             Int
  storageLocationI     StorageLocation? @relation("locationIn", fields: [storageLocationInId], references: [id])
  storageLocationInId  Int?             @unique @map("storageLocationIn_id")
  storageLocationO     StorageLocation? @relation("locationOut", fields: [storageLocationOutId], references: [id])
  storageLocationOutId Int?             @unique @map("storageLocationOut_id")

  @@map("stockControl")
}
