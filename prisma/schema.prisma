// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PackOrUnit {
  PACK
  UNIT
}

model CompanyInfo {
  name              String
  address           String
  addressLocalCode  String
  addressLocalZones String
  email             String @unique
  phone             String

  @@map("companyInfo")
}

model User {
  id                String   @id @default(uuid())
  name              String
  colabStatus       String
  address           String
  addressLocalCode  String
  addressLocalZones String
  addressLocal      String
  email             String   @unique
  phone             String
  role              Role     @default(USER)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")

  @@map("users")
}

model Product {
  id             String            @id @default(uuid())
  upc            String            @unique
  sku            String            @unique
  name           String
  description    String
  price          String
  photo          String
  tax            Tax[]
  packOrUn       PackOrUnit
  packUnQt       Int
  supplier       String
  category       ProductCategory[]
  expirationDate DateTime
  stockRecQt     Int
  alert1         Int
  alert2         Int
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @default(now()) @map("updated_at")
  Suppliers      Suppliers?        @relation(fields: [suppliersId], references: [id])
  suppliersId    Int?
  StockControl   StockControl?     @relation(fields: [stockControlId], references: [id])
  stockControlId Int?

  @@map("products")
}

model Tax {
  id        Int      @id @default(autoincrement())
  taxValue  Int      @default(23)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@map("taxes")
}

model ProductCategory {
  id        Int      @id @default(autoincrement())
  category  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@map("productCategory")
}

model Suppliers {
  id                Int       @id @default(autoincrement())
  name              String
  taxNumber         Product[]
  address           String
  addressLocalCode  String
  addressLocalZones String
  addressLocal      String
  country           String
  phone1            String
  phone2            String
  email             String    @unique
  paymentCond       Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("suppliers")
}

model StorageLocation {
  id                Int           @id @default(autoincrement())
  name              String
  description       String
  StockControlIn    StockControl? @relation(fields: [localIn], references: [id])
  stockControlInId  Int?
  StockControlOut   StockControl? @relation(fields: [localOut], references: [id])
  stockControlOutId Int?

  @@map("storageLocation")
}

model StockControl {
  id        Int               @id @default(autoincrement())
  idProduto Product[]
  quantity  Int
  localIn   StorageLocation[]
  localOut  StorageLocation[]
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @default(now()) @map("updated_at")

  @@map("stockControl")
}
